
       _               _              
   ___| |__   ___  ___| | _______   __
  / __| '_ \ / _ \/ __| |/ / _ \ \ / /
 | (__| | | |  __/ (__|   < (_) \ V / 
  \___|_| |_|\___|\___|_|\_\___/ \_/  
                                      
By bridgecrew.io | version: 2.3.240 

terraform scan results:

Passed checks: 34, Failed checks: 49, Skipped checks: 0

Check: CKV_AWS_45: "Ensure no hard-coded secrets exist in lambda environment"
	PASSED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/bc_aws_secrets_3
Check: CKV_AWS_258: "Ensure that Lambda function URLs AuthType is not None"
	PASSED for resource: aws_lambda_function_url.lambda_url
	File: /main.tf:54-57
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-authtype-for-your-lambda-function-urls-is-defined
Check: CKV_AWS_45: "Ensure no hard-coded secrets exist in lambda environment"
	PASSED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/bc_aws_secrets_3
Check: CKV_AWS_45: "Ensure no hard-coded secrets exist in lambda environment"
	PASSED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/bc_aws_secrets_3
Check: CKV_AWS_93: "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)"
	PASSED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_24
Check: CKV_AWS_56: "Ensure S3 bucket has 'restrict_public_bucket' enabled"
	PASSED for resource: aws_s3_bucket_public_access_block.access_s3_bucket
	File: /main.tf:164-171
	Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_22
Check: CKV_AWS_55: "Ensure S3 bucket has ignore public ACLs enabled"
	PASSED for resource: aws_s3_bucket_public_access_block.access_s3_bucket
	File: /main.tf:164-171
	Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_21
Check: CKV_AWS_54: "Ensure S3 bucket has block public policy enabled"
	PASSED for resource: aws_s3_bucket_public_access_block.access_s3_bucket
	File: /main.tf:164-171
	Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_20
Check: CKV_AWS_53: "Ensure S3 bucket has block public ACLS enabled"
	PASSED for resource: aws_s3_bucket_public_access_block.access_s3_bucket
	File: /main.tf:164-171
	Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_19
Check: CKV_AWS_133: "Ensure that RDS instances has backup policy"
	PASSED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-that-rds-instances-have-backup-policy
Check: CKV_AWS_211: "Ensure RDS uses a modern CaCert"
	PASSED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-rds-uses-a-modern-cacert
Check: CKV_AWS_130: "Ensure VPC subnets do not assign public IP by default"
	PASSED for resource: aws_subnet.subnet_1
	File: /main.tf:223-227
	Guide: https://docs.bridgecrew.io/docs/ensure-vpc-subnets-do-not-assign-public-ip-by-default
Check: CKV_AWS_130: "Ensure VPC subnets do not assign public IP by default"
	PASSED for resource: aws_subnet.subnet_2
	File: /main.tf:229-233
	Guide: https://docs.bridgecrew.io/docs/ensure-vpc-subnets-do-not-assign-public-ip-by-default
Check: CKV_AWS_61: "Ensure AWS IAM policy does not allow assume role permission across all services"
	PASSED for resource: aws_iam_role.lambda_role
	File: /main.tf:294-309
	Guide: https://docs.bridgecrew.io/docs/bc_aws_iam_45
Check: CKV_AWS_60: "Ensure IAM role allows only specific services or principals to assume it"
	PASSED for resource: aws_iam_role.lambda_role
	File: /main.tf:294-309
	Guide: https://docs.bridgecrew.io/docs/bc_aws_iam_44
Check: CKV_AWS_274: "Disallow IAM roles, users, and groups from using the AWS AdministratorAccess policy"
	PASSED for resource: aws_iam_role.lambda_role
	File: /main.tf:294-309
Check: CKV_AWS_274: "Disallow IAM roles, users, and groups from using the AWS AdministratorAccess policy"
	PASSED for resource: aws_iam_role_policy_attachment.lambda_role_policy_attachment
	File: /main.tf:311-314
Check: CKV_AWS_286: "Ensure IAM policies does not allow privilege escalation"
	PASSED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336
Check: CKV_AWS_62: "Ensure IAM policies that allow full "*-*" administrative privileges are not created"
	PASSED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336
	Guide: https://docs.bridgecrew.io/docs/iam_47
Check: CKV_AWS_63: "Ensure no IAM policies documents allow "*" as a statement's actions"
	PASSED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336
	Guide: https://docs.bridgecrew.io/docs/iam_48
Check: CKV_AWS_274: "Disallow IAM roles, users, and groups from using the AWS AdministratorAccess policy"
	PASSED for resource: aws_iam_role_policy_attachment.lambda_role_policy_attachment_2
	File: /main.tf:338-341
Check: CKV_AWS_41: "Ensure no hard coded AWS access key and secret key exists in provider"
	PASSED for resource: aws.default
	File: /main.tf:12-15
	Guide: https://docs.bridgecrew.io/docs/bc_aws_secrets_5
Check: CKV_AWS_20: "S3 Bucket has an ACL defined which allows public READ access."
	PASSED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3_1-acl-read-permissions-everyone
Check: CKV_AWS_19: "Ensure all data stored in the S3 bucket is securely encrypted at rest"
	PASSED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3_14-data-encrypted-at-rest
Check: CKV2_AWS_44: "Ensure AWS route table with VPC peering does not contain routes overly permissive to all traffic"
	PASSED for resource: aws_route_table.main_rtb
	File: /main.tf:266-273
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-route-table-with-vpc-peering-does-not-contain-routes-overly-permissive-to-all-traffic
Check: CKV2_AWS_44: "Ensure AWS route table with VPC peering does not contain routes overly permissive to all traffic"
	PASSED for resource: aws_route.public_internet_gateway
	File: /main.tf:275-279
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-route-table-with-vpc-peering-does-not-contain-routes-overly-permissive-to-all-traffic
Check: CKV2_AWS_35: "AWS NAT Gateways should be utilized for the default route"
	PASSED for resource: aws_route_table.main_rtb
	File: /main.tf:266-273
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nat-gateways-are-utilized-for-the-default-route
Check: CKV2_AWS_35: "AWS NAT Gateways should be utilized for the default route"
	PASSED for resource: aws_route.public_internet_gateway
	File: /main.tf:275-279
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nat-gateways-are-utilized-for-the-default-route
Check: CKV2_AWS_56: "Ensure AWS Managed IAMFullAccess IAM policy is not used."
	PASSED for resource: aws_iam_role.lambda_role
	File: /main.tf:294-309
Check: CKV2_AWS_56: "Ensure AWS Managed IAMFullAccess IAM policy is not used."
	PASSED for resource: aws_iam_role_policy_attachment.lambda_role_policy_attachment
	File: /main.tf:311-314
Check: CKV2_AWS_5: "Ensure that Security Groups are attached to another resource"
	PASSED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis
Check: CKV2_AWS_40: "Ensure AWS IAM policy does not allow full IAM privileges"
	PASSED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336
Check: CKV2_AWS_6: "Ensure that S3 bucket has a Public Access block"
	PASSED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3-bucket-should-have-public-access-blocks-defaults-to-false-if-the-public-access-block-is-not-attached
Check: CKV_AWS_57: "S3 Bucket has an ACL defined which allows public WRITE access."
	PASSED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3_2-acl-write-permissions-everyone
Check: CKV_AWS_272: "Ensure AWS Lambda function is configured to validate code-signing"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_5

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_50: "X-ray tracing is enabled for Lambda"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_4

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
	FAILED for resource: aws_lambda_function.ingest_event
	File: /main.tf:38-52
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit

		38 | resource "aws_lambda_function" "ingest_event" {
		39 |   filename         = "aws_lambda_functions/ingest_event.zip"
		40 |   function_name    = "ingest_event"
		41 |   source_code_hash = data.archive_file.ingest_event.output_base64sha256
		42 |   handler          = "ingest_event.lambda_handler"
		43 |   runtime          = "python3.9"
		44 |   timeout          = 5
		45 |   role             = aws_iam_role.lambda_role.arn
		46 | 
		47 |   environment {
		48 |     variables = {
		49 |       KINESIS_STREAM = var.kinesis_stream
		50 |     }
		51 |   }
		52 | }

Check: CKV_AWS_272: "Ensure AWS Lambda function is configured to validate code-signing"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_5

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_50: "X-ray tracing is enabled for Lambda"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_4

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
	FAILED for resource: aws_lambda_function.store_event_to_s3
	File: /main.tf:59-78
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit

		59 | resource "aws_lambda_function" "store_event_to_s3" {
		60 |   filename         = "aws_lambda_functions/store_event_to_s3.zip"
		61 |   function_name    = "store_event_to_s3"
		62 |   source_code_hash = data.archive_file.store_event_to_s3.output_base64sha256
		63 |   handler          = "store_event_to_s3.lambda_handler"
		64 |   runtime          = "python3.9"
		65 |   timeout          = 20
		66 |   role             = aws_iam_role.lambda_role.arn
		67 | 
		68 |   environment {
		69 |     variables = {
		70 |       S3_BUCKET = aws_s3_bucket.s3_bucket.id
		71 |     }
		72 |   }
		73 | 
		74 |   depends_on = [
		75 |     aws_kinesis_stream.kinesis_stream,
		76 |     aws_s3_bucket.s3_bucket
		77 |   ]
		78 | }

Check: CKV_AWS_272: "Ensure AWS Lambda function is configured to validate code-signing"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_5

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_50: "X-ray tracing is enabled for Lambda"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/bc_aws_serverless_4

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
	FAILED for resource: aws_lambda_function.store_event_to_db
	File: /main.tf:80-107
	Guide: https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit

		80  | resource "aws_lambda_function" "store_event_to_db" {
		81  |   filename         = "aws_lambda_functions/store_event_to_db.zip"
		82  |   function_name    = "store_event_to_db"
		83  |   source_code_hash = data.archive_file.store_event_to_db.output_base64sha256
		84  |   handler          = "store_event_to_db.lambda_handler"
		85  |   runtime          = "python3.9"
		86  |   timeout          = 20
		87  |   role             = aws_iam_role.lambda_role.arn
		88  | 
		89  |   layers = [
		90  |     aws_lambda_layer_version.lambda_psycopg2_layer.arn
		91  |   ]
		92  | 
		93  |   environment {
		94  |     variables = {
		95  |       #SECRET_NAME = aws_secretsmanager_secret.rds_secret.name
		96  |       USERNAME = aws_db_instance.pg_db.username
		97  |       PASSWORD = aws_db_instance.pg_db.password
		98  |       ENDPOINT = aws_db_instance.pg_db.endpoint
		99  |       DB       = aws_db_instance.pg_db.db_name
		100 |     }
		101 |   }
		102 | 
		103 |   depends_on = [
		104 |     aws_lambda_layer_version.lambda_psycopg2_layer,
		105 |     aws_db_instance.pg_db
		106 |   ]
		107 | }

Check: CKV_AWS_43: "Ensure Kinesis Stream is securely encrypted"
	FAILED for resource: aws_kinesis_stream.kinesis_stream
	File: /main.tf:123-131
	Guide: https://docs.bridgecrew.io/docs/bc_aws_general_22

		123 | resource "aws_kinesis_stream" "kinesis_stream" {
		124 |   name             = var.kinesis_stream
		125 |   shard_count      = 1
		126 |   retention_period = 24
		127 |   
		128 |   stream_mode_details {
		129 |     stream_mode = "PROVISIONED"
		130 |   }
		131 | }

Check: CKV_AWS_185: "Ensure Kinesis Stream is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_kinesis_stream.kinesis_stream
	File: /main.tf:123-131
	Guide: https://docs.bridgecrew.io/docs/bc_aws_general_105

		123 | resource "aws_kinesis_stream" "kinesis_stream" {
		124 |   name             = var.kinesis_stream
		125 |   shard_count      = 1
		126 |   retention_period = 24
		127 |   
		128 |   stream_mode_details {
		129 |     stream_mode = "PROVISIONED"
		130 |   }
		131 | }

Check: CKV_AWS_149: "Ensure that Secrets Manager secret is encrypted using KMS CMK"
	FAILED for resource: aws_secretsmanager_secret.rds_secret
	File: /main.tf:181-183
	Guide: https://docs.bridgecrew.io/docs/ensure-that-secrets-manager-secret-is-encrypted-using-kms

		181 | resource "aws_secretsmanager_secret" "rds_secret" {
		182 |   name_prefix = "pg_rds_secret"
		183 | }

Check: CKV_AWS_161: "Ensure RDS database has IAM authentication enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-rds-database-has-iam-authentication-enabled

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_16: "Ensure all data stored in the RDS is securely encrypted at rest"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/general_4

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_293: "Ensure that AWS database instances have deletion protection enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_129: "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-that-respective-logs-of-amazon-relational-database-service-amazon-rds-are-enabled

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_157: "Ensure that RDS instances have Multi-AZ enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/general_73

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_17: "Ensure all data stored in RDS is not publicly accessible"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/public_2

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_226: "Ensure DB instance gets all minor upgrades automatically"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-db-instance-gets-all-minor-upgrades-automatically

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_118: "Ensure that enhanced monitoring is enabled for Amazon RDS instances"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_277: "Ensure no security groups allow ingress from 0.0.0.0:0 to port -1"
	FAILED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-security-group-does-not-allow-all-traffic-on-all-ports

		235 | resource "aws_security_group" "main_sg" {
		236 |   name   = "main_sg"
		237 |   description = "Security group for AWS lambda and AWS RDS connection"
		238 |   vpc_id = aws_vpc.main.id
		239 | 
		240 |   # Only postgres in
		241 |   ingress {
		242 |     from_port = 0
		243 |     to_port = 0
		244 |     protocol = "-1"
		245 |     cidr_blocks = ["0.0.0.0/0"]
		246 |   }
		247 | 
		248 |   # Allow all outbound traffic.
		249 |   egress {
		250 |     from_port = 0
		251 |     to_port = 0
		252 |     protocol = "-1"
		253 |     cidr_blocks = ["0.0.0.0/0"]
		254 |   }
		255 | }

Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/networking_31

		235 | resource "aws_security_group" "main_sg" {
		236 |   name   = "main_sg"
		237 |   description = "Security group for AWS lambda and AWS RDS connection"
		238 |   vpc_id = aws_vpc.main.id
		239 | 
		240 |   # Only postgres in
		241 |   ingress {
		242 |     from_port = 0
		243 |     to_port = 0
		244 |     protocol = "-1"
		245 |     cidr_blocks = ["0.0.0.0/0"]
		246 |   }
		247 | 
		248 |   # Allow all outbound traffic.
		249 |   egress {
		250 |     from_port = 0
		251 |     to_port = 0
		252 |     protocol = "-1"
		253 |     cidr_blocks = ["0.0.0.0/0"]
		254 |   }
		255 | }

Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	FAILED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/networking_1-port-security

		235 | resource "aws_security_group" "main_sg" {
		236 |   name   = "main_sg"
		237 |   description = "Security group for AWS lambda and AWS RDS connection"
		238 |   vpc_id = aws_vpc.main.id
		239 | 
		240 |   # Only postgres in
		241 |   ingress {
		242 |     from_port = 0
		243 |     to_port = 0
		244 |     protocol = "-1"
		245 |     cidr_blocks = ["0.0.0.0/0"]
		246 |   }
		247 | 
		248 |   # Allow all outbound traffic.
		249 |   egress {
		250 |     from_port = 0
		251 |     to_port = 0
		252 |     protocol = "-1"
		253 |     cidr_blocks = ["0.0.0.0/0"]
		254 |   }
		255 | }

Check: CKV_AWS_260: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"
	FAILED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80

		235 | resource "aws_security_group" "main_sg" {
		236 |   name   = "main_sg"
		237 |   description = "Security group for AWS lambda and AWS RDS connection"
		238 |   vpc_id = aws_vpc.main.id
		239 | 
		240 |   # Only postgres in
		241 |   ingress {
		242 |     from_port = 0
		243 |     to_port = 0
		244 |     protocol = "-1"
		245 |     cidr_blocks = ["0.0.0.0/0"]
		246 |   }
		247 | 
		248 |   # Allow all outbound traffic.
		249 |   egress {
		250 |     from_port = 0
		251 |     to_port = 0
		252 |     protocol = "-1"
		253 |     cidr_blocks = ["0.0.0.0/0"]
		254 |   }
		255 | }

Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	FAILED for resource: aws_security_group.main_sg
	File: /main.tf:235-255
	Guide: https://docs.bridgecrew.io/docs/networking_2

		235 | resource "aws_security_group" "main_sg" {
		236 |   name   = "main_sg"
		237 |   description = "Security group for AWS lambda and AWS RDS connection"
		238 |   vpc_id = aws_vpc.main.id
		239 | 
		240 |   # Only postgres in
		241 |   ingress {
		242 |     from_port = 0
		243 |     to_port = 0
		244 |     protocol = "-1"
		245 |     cidr_blocks = ["0.0.0.0/0"]
		246 |   }
		247 | 
		248 |   # Allow all outbound traffic.
		249 |   egress {
		250 |     from_port = 0
		251 |     to_port = 0
		252 |     protocol = "-1"
		253 |     cidr_blocks = ["0.0.0.0/0"]
		254 |   }
		255 | }

Check: CKV_AWS_288: "Ensure IAM policies does not allow data exfiltration"
	FAILED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336

		316 | resource "aws_iam_policy" "lambda_policy" {
		317 |   name = "lambda_policy"
		318 | 
		319 |   policy = jsonencode({
		320 |     Version = "2012-10-17"
		321 |     Statement = [
		322 |       {
		323 |         Effect = "Allow"
		324 |         Action = [
		325 |           "logs:*",
		326 |           "cloudwatch:*",
		327 |           "kinesis:*",
		328 |           "s3:*",
		329 |           "ec2:*",
		330 |           "secretsmanager:*"
		331 |         ]
		332 |         Resource = "*"
		333 |       }
		334 |     ]
		335 |   })
		336 | }

Check: CKV_AWS_289: "Ensure IAM policies does not allow permissions management / resource exposure without constraints"
	FAILED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336

		316 | resource "aws_iam_policy" "lambda_policy" {
		317 |   name = "lambda_policy"
		318 | 
		319 |   policy = jsonencode({
		320 |     Version = "2012-10-17"
		321 |     Statement = [
		322 |       {
		323 |         Effect = "Allow"
		324 |         Action = [
		325 |           "logs:*",
		326 |           "cloudwatch:*",
		327 |           "kinesis:*",
		328 |           "s3:*",
		329 |           "ec2:*",
		330 |           "secretsmanager:*"
		331 |         ]
		332 |         Resource = "*"
		333 |       }
		334 |     ]
		335 |   })
		336 | }

Check: CKV_AWS_287: "Ensure IAM policies does not allow credentials exposure"
	FAILED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336

		316 | resource "aws_iam_policy" "lambda_policy" {
		317 |   name = "lambda_policy"
		318 | 
		319 |   policy = jsonencode({
		320 |     Version = "2012-10-17"
		321 |     Statement = [
		322 |       {
		323 |         Effect = "Allow"
		324 |         Action = [
		325 |           "logs:*",
		326 |           "cloudwatch:*",
		327 |           "kinesis:*",
		328 |           "s3:*",
		329 |           "ec2:*",
		330 |           "secretsmanager:*"
		331 |         ]
		332 |         Resource = "*"
		333 |       }
		334 |     ]
		335 |   })
		336 | }

Check: CKV_AWS_290: "Ensure IAM policies does not allow write access without constraints"
	FAILED for resource: aws_iam_policy.lambda_policy
	File: /main.tf:316-336

		316 | resource "aws_iam_policy" "lambda_policy" {
		317 |   name = "lambda_policy"
		318 | 
		319 |   policy = jsonencode({
		320 |     Version = "2012-10-17"
		321 |     Statement = [
		322 |       {
		323 |         Effect = "Allow"
		324 |         Action = [
		325 |           "logs:*",
		326 |           "cloudwatch:*",
		327 |           "kinesis:*",
		328 |           "s3:*",
		329 |           "ec2:*",
		330 |           "secretsmanager:*"
		331 |         ]
		332 |         Resource = "*"
		333 |       }
		334 |     ]
		335 |   })
		336 | }

Check: CKV2_AWS_11: "Ensure VPC flow logging is enabled in all VPCs"
	FAILED for resource: aws_vpc.main
	File: /main.tf:217-221
	Guide: https://docs.bridgecrew.io/docs/logging_9-enable-vpc-flow-logging

		217 | resource "aws_vpc" "main" {
		218 |   cidr_block = "10.0.0.0/16"
		219 |   enable_dns_hostnames = true
		220 |   enable_dns_support   = true
		221 | }

Check: CKV2_AWS_12: "Ensure the default security group of every VPC restricts all traffic"
	FAILED for resource: aws_vpc.main
	File: /main.tf:217-221
	Guide: https://docs.bridgecrew.io/docs/networking_4

		217 | resource "aws_vpc" "main" {
		218 |   cidr_block = "10.0.0.0/16"
		219 |   enable_dns_hostnames = true
		220 |   enable_dns_support   = true
		221 | }

Check: CKV2_AWS_57: "Ensure Secrets Manager secrets should have automatic rotation enabled"
	FAILED for resource: aws_secretsmanager_secret.rds_secret
	File: /main.tf:181-183

		181 | resource "aws_secretsmanager_secret" "rds_secret" {
		182 |   name_prefix = "pg_rds_secret"
		183 | }

Check: CKV_AWS_21: "Ensure all data stored in the S3 bucket have versioning enabled"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3_16-enable-versioning

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }

Check: CKV2_AWS_61: "Ensure that an S3 bucket has a lifecycle configuration"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }

Check: CKV2_AWS_60: "Ensure RDS instance with copy tags to snapshots is enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV2_AWS_30: "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"
	FAILED for resource: aws_db_instance.pg_db
	File: /main.tf:200-212
	Guide: https://docs.bridgecrew.io/docs/bc_aws_logging_32

		200 | resource "aws_db_instance" "pg_db" {
		201 |   allocated_storage    = 10
		202 |   apply_immediately    = true
		203 |   db_name              = "hw_db"
		204 |   engine               = "postgres"
		205 |   instance_class       = "db.t3.micro"
		206 |   username             = "lambda"
		207 |   password             = random_password.db_password.result
		208 |   skip_final_snapshot  = true
		209 |   publicly_accessible  = true
		210 |   db_subnet_group_name = aws_db_subnet_group.db_subnet_group.id
		211 |   vpc_security_group_ids = [aws_security_group.main_sg.id]
		212 | }

Check: CKV_AWS_144: "Ensure that S3 bucket has cross-region replication enabled"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/ensure-that-s3-bucket-has-cross-region-replication-enabled

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }

Check: CKV2_AWS_62: "Ensure S3 buckets should have event notifications enabled"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }

Check: CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/s3_13-enable-logging

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }

Check: CKV_AWS_145: "Ensure that S3 buckets are encrypted with KMS by default"
	FAILED for resource: aws_s3_bucket.s3_bucket
	File: /main.tf:160-162
	Guide: https://docs.bridgecrew.io/docs/ensure-that-s3-buckets-are-encrypted-with-kms-by-default

		160 | resource "aws_s3_bucket" "s3_bucket" {
		161 |   bucket_prefix = var.s3_bucket_prefix
		162 | }


